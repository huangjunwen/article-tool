#!/usr/bin/env node

const yargs = require('yargs')
const getStream = require('../lib/get-stream.js')
const tex2svgInit = require('../lib/tex2svg.js')

var argv = yargs
  .strict()
  .usage('$0 [options]: convert stdin math formula to stdout svg')
  .options({
    css: {
      type: 'boolean',
      default: false,
      describe: 'return css instead svg'
    },
    inline: {
      type: 'boolean',
      default: true,
      describe: 'process as inline math'
    },
    em: {
      type: 'number',
      describe: 'em-size in pixels'
    },
    ex: {
      type: 'number',
      describe: 'ex-size in pixels'
    },
    width: {
      type: 'number',
      describe: 'width of container in pixels'
    },
    container: {
      type: 'boolean',
      describe: 'include <mjx-container> element'
    },
    packages: {
      type: 'string',
      describe: 'the packages to use, e.g. "base, ams"; use "*" to represent the default packages, e.g, "*, bbox"'
    },
    fontCache: {
      type: 'boolean',
      default: true,
      describe: 'whether to use a local font cache or not'
    }
  })
  .argv

async function main () {

  let input = await getStream(process.stdin)

  const { tex2svg, tex2svgCSS } = await tex2svgInit({
    packages: argv.packages,
    fontCache: argv.fontCache
  })

  if (argv.css) {
    console.log(tex2svgCSS)
    return
  }
  console.log(tex2svg(input, {
    inline: argv.inline,
    em: argv.em,
    ex: argv.ex,
    width: argv.width,
    container: argv.container
  }))
}

main().then(() => {})
