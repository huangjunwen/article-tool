#!/usr/bin/env node

const fs = require('fs')
const assert = require('assert').ok
const getStream = require('get-stream')
const cheerio = require('cheerio')
const prism = require('prismjs')
const { init: tex2svgInit } = require('../lib/tex2svg.js')

/////////////////////// 环境变量 ///////////////////////

// 如果 MATHJAX_CLIENT_RENDER=1 的话则在客户端渲染, 否则在服务端渲染
const mjxClientRender = process.env['MATHJAX_CLIENT_RENDER'] === '1'

// 指定客户端 cdn js url
const mjxClientJSUrl = process.env['MATHJAX_CLIENT_JS_URL'] || 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js'

// mathjax 的 font cache 设置, server side render 只支持 none/local, client side render 则支持 none/local/global
const mjxFontCache = process.env['MATHJAX_FONT_CACHE'] || (mjxClientRender ? 'global' : 'none')
assert(mjxFontCache === 'none' || mjxFontCache === 'local' || (mjxFontCache === 'global' && mjxClientRender))

/////////////////////////////////////////////////////////

// 参考自
//   https://graemephi.github.io/posts/static-katex-with-hugo/
//   https://gist.github.com/graemephi/7c60093f342b6dabf00d976492b6c91f
async function renderMath (data) {

  if (mjxClientRender) {
    data.blocks.push({
      t: 'RawBlock',
      c: ['html', `<script>
  window.MathJax = {
    options: {
      processHtmlClass: 'math'
    },
    svg: {
      fontCache: '${mjxFontCache}'
    }
  };
  (function () {
    var script = document.createElement('script');
    script.src = '${mjxClientJSUrl}';
    script.async = true;
    document.head.appendChild(script);
  })();
</script>`]
    })
    return
  }

  const { tex2svg, css } = await tex2svgInit({
    fontCache: mjxFontCache !== 'none'
  })

  function visitMath (block) {
    if (block.t === 'Math') {
      const [{ t: mathType }, value] = block.c
      const inline = mathType == 'InlineMath'
      block.t = 'RawInline'
      block.c = ['html', tex2svg(value, { inline, container: true })]
      return
    }
    if (Array.isArray(block.c)) {
      block.c.forEach(visitMath)
      return
    }
  }
  data.blocks.forEach(visitMath)

  data.blocks.push({
    t: 'RawBlock',
    c: ['html', css]
  })

}

async function renderCode(data) {

  function visitCode (block) {

    if (block.t === 'CodeBlock') {

      let [[id, classes, attrs], value] = block.c
      let lang = ''
      let grammer = null
      // 逐个尝试确定语言
      for (let i=0; i<classes.length; i++) {
        let l = classes[i]
        let g = prism.languages[l]
        if (g) {
          lang = l
          grammer = g
          break
        }
      }
      classes.push(`language-${lang}`)  // XXX: 'language-' 也是有效的
      attrs = Object.fromEntries(attrs)

      // 着色
      let code = grammer ? prism.highlight(value, grammer, lang) : prism.util.encode(value)

      // 将所有 text node 中的空格转换为 nbsp
      {
        let $ = cheerio.load(code)
        let replaceSp = function (el) {
          $(el).contents().filter((i, sub) => {
            if (sub.type === 'text') {
              sub.data = sub.data.replaceAll('\u0020', '\u00a0')
            } else if (sub.type === 'tag') {
              replaceSp(sub)
            }
          })
        }
        replaceSp($.root())
        code = $.html()
      }

      // 添加 lineno
      // https://pandoc.org/MANUAL.html#extension-fenced_code_blocks
      // > The numberLines (or number-lines) class will cause the lines of the code block to be numbered,
      // > starting with 1 or the value of the startFrom attribute.
      if (classes.includes('numberLines') || classes.includes('number-lines')) {
        const start = attrs.startFrom || "1"
        code = code.split('\n').map((line) => { return `<li>${line}</li>` }).join('')
        code = `<ol start="${start}">${code}</ol>`
      }

      block.c = ['html', `<pre><code class="${classes.join(' ')}">${code}</code></pre>`]
      block.t = 'RawBlock'
      return
    }
    if (Array.isArray(block.c)) {
      block.c.forEach(visitCode)
      return
    }
  }
  data.blocks.forEach(visitCode)
}

async function main () {
  let data = JSON.parse(await getStream(process.stdin))
  await renderMath(data)
  await renderCode(data)
  console.log(JSON.stringify(data))
}

main().then(() => {})
